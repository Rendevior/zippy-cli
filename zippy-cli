#!/bin/sh

# Default Options
DownloadUtil="wget"

GetFileLoc(){
	if [ "$FileLocation" = "" ]; then
		printf '%s' "Enter File Location: "
		read -r FileLocation
		# FileLocation="${REPLY}"
	fi
}

Checkers(){
	ZippyFileLoc="$1"
	ZippyFileLoc_name="$ZippyFileLoc"
	if ! [ -e "$ZippyFileLoc" ]; then
		echo "[ERROR] $ZippyFileLoc: No such file or directory" >&2
		exit 1
	fi
}

CheckDir(){
	if [ -d "$1" ]; then
		ZippyFileLoc_name="$ZippyFileLoc_name.zip"
		zip -r -o "$ZippyFileLoc_name" "$ZippyFileLoc" >/dev/null 2>&1
	fi
	if [ "$(stat -c '%s' "$ZippyFileLoc_name")" -gt 4000000000 ]; then
		echo "File size is higher than 500mb" >&2
		if [ -d "$1" ]; then
			rm "$ZippyFileLoc_name"
		fi
		exit 1
	fi
}

GetInfos(){
	URLLoad=$(
		wget -qO- "https://www.zippyshare.com/sites/index_old.jsp"
	)
	IDup=$(
		echo "$URLLoad" | \
		sed -E '/var.*uploadId/q;$!d' | \
		awk -F["'"] '{print $2}'
	)
	Serverup=$(
		echo "$URLLoad" | \
		sed -E '/var.*server/q;$!d' | \
		awk -F["'"] '{print $2}'
	)
}

UploadFile(){
	curl -o "$HOME/.cachedo" \
	-F "upload_form=@$ZippyFileLoc_name" \
	-F "uploadId=${IDup}" \
	"https://${Serverup}.zippyshare.com/upload" -#
}

GetLinkInfos(){
	ZippyDownloadLink=$(
		grep -o '\[url\].*\[/url\]' "$HOME/.cachedo" | \
		sed -E 's_\[url\]|\[/url\]__g'
	)
	echo ''
	echo "The File Has Been Uploaded"
	echo "Download Link: $ZippyDownloadLink"
}

CleanUp(){
	if [ -f "$HOME/.cachedo"  ]; then
		rm "$HOME/.cachedo"
	fi
	if [ -d "$ZippyFileLoc" ]; then
		rm "$ZippyFileLoc_name"
	fi
}

SolverDownldr(){
	Solv="$1"
	n="$(( Solv % 2 ))"
	b="$(( Solv % 3 ))"
	z="$Solv"
}

# Download Instead
DownInst(){
	DownLink="$1"
	SliceDomain=$(
		echo "$DownLink" | \
		awk -F[/:] '{print $4}'
	)
	if ! echo "$SliceDomain" | grep 'zippyshare' > /dev/null; then
		echo "Unsupported Domain" >&2
		exit 1
	fi
	ZippyMainOrigin=$(
		echo "$DownLink" | \
		awk -F[/:] '{print $4}'
	)
	PageLoad=$(
		wget -qO- "$DownLink"
	)
	BaseSolver=$(
		echo "$PageLoad" | \
		grep -E "var b =" | \
		sed 's/^.*=[[:space:]]//g;s/%.*//g'
	)
	# Funtion Used to Solve to get the secret CRSF token
	SolverDownldr "$BaseSolver"
	if [ "$BaseSolver" = "" ]; then
		echo "The Link You Entered is Not Downloadable"
		exit 1
	fi
	ZippySolve="$(( n + b + z ))"
	ZippyBridge2=$(
		echo "$PageLoad" | \
		grep "document.getElementById('dlbutton').href" | \
		awk -F['"'] '{print $2}'
	)
	ZippyBridge3=$(
		echo "$PageLoad" | \
		grep "document.getElementById('dlbutton').href" | \
		awk -F['"'] '{print $4}'
	)
	# NameFile="${ZippyBridge3/[\/]/}"
	NameFile=$(
		echo "$ZippyBridge3" | \
		tr -d '/'
	)
	DownloadLinkRes="https://${ZippyMainOrigin}${ZippyBridge2}${ZippySolve}${ZippyBridge3}"
	# Download Program can be Optional
	if [ $DownloadUtil = "wget" ]; then
		"${DownloadUtil}" "$DownloadLinkRes" -O "$NameFile"
	else
		"${DownloadUtil}" "$DownloadLinkRes" -o "$NameFile"
	fi
}

InfoHelp(){
	echo 'Usage: emina-cli -i "<search query>"'
	echo 'Usage: emina-cli [arguments...]'
	echo ''
	echo "Simple Program that allows you to Upload/Download Files via Command Line"
	echo ''
	echo "Options:"
	echo '   -f "<file>"\t\t\t: Insert the File location to Upload'
	echo '   -d "<url>"\t\t\t: Download a File from ZippyShare'
	echo "   -v\t\t\t\t: Show the version of the script"
	echo "   -h\t\t\t\t: Show this help"
	echo "   --aria\t\t\t: Use Aria2c as Downloader"
	echo ''
	echo 'Max file size upload: 500MB'
	echo ''
}

main(){
	GetFileLoc
	Checkers "$FileLocation"
	CheckDir "$ZippyFileLoc"
	GetInfos
	UploadFile
	GetLinkInfos
	CleanUp
}

ParseArgs(){
	while getopts ":d:f:-:vh" opt; do
		case "${opt}" in
			f)
				case $OPTARG in
					-*)
						echo "File Location is Not Specified" >&2
						InfoHelp
						exit 1
						;;
					*)
						FileLocation="${OPTARG}"
						;;
				esac
				;;
			d)
				case $OPTARG in
					-*)
						echo "File Location is Not Specified" >&2
						InfoHelp
						exit 1
						;;
					*)
						DownInst "${OPTARG}"
						exit 0
						;;
				esac
				;;
			-)
				case $OPTARG in
					aria)
						DownloadUtil="aria2c"
					;;
					*)
						echo "Invalid Program" >&2
						exit 1
					;;
				esac
				;;
			v)
				echo "v0.0.1"
				exit 0
				;;
			h)
				InfoHelp
				exit 0
				;;
			\?)
				echo "[${OPTARG}] : is not valid Argument" >&2
				InfoHelp
				exit 1
				;;
			:)
				echo "[-${OPTARG}] : Argument must have a Value" >&2
				InfoHelp
				exit 1
				;;
		esac
	done
	shift $((OPTIND -1))
}

ParseArgs "$@"
main
