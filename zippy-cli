#!/bin/sh

# Variables
VERSION="v0.2.0"
download_util="curl"
base_domain="zippyshare.com"

# Text Processors
err(){
	[ -n "${*}" ] && printf "\033[38;5;1m%b\033[0m\n" "${*}" >&2
}

die(){
	err "${1}"
	exit 1
}

inf(){
	printf "\033[38;5;3m%b\033[0m\n" "${1}"
}

suc(){
	printf "\033[38;5;2m%b\033[0m\n" "${1}"
}

dep_check(){
	for deppack; do
		if ! command -v "${deppack}" >/dev/null ; then
			err "Program \"${deppack}\" not found. Please install it."
			[ "${deppack}" = "aria2c" ] && err "To install aria2c, Type <your_package_manager> aria2"
			exit 1
		fi
	done
}

# -- Main Functions -- #
get_file_dir(){
	if [ -z "${1}" ]; then
		printf '%s' "Enter File Location to Upload: "
		read -r file_dir
	fi
}

checkif(){
	if ! [ -e "${1}" ]; then
		die "${1}: No such file or directory"
	fi
}

is_dir(){
	file_name="${1}"
	if [ -d "${file_name}" ]; then
		dep_check "zip"
		file_name="${1##*/}.tmp.zip"
		zip -r -o "${file_name}" "${1}" >/dev/null 2>&1
	fi
	if [ "$(stat -c '%s' "${file_name}")" -gt 524288000 ]; then
		[ -d "${file_name}" ] && rm "${file_name}"
		die "File size is higher than 500mb"
	fi
}

get_infos(){
	index_jsp="$(curl -sLfk "https://www.${base_domain}/sites/index_old.jsp")" || return 1
	id_up="$(printf '%s' "${index_jsp}" | sed -E '/var.*uploadId/!d;s_.*=.\x27([^\x27]*)\x27.*_\1_')"
	serv_up="$(printf '%s' "${index_jsp}" | sed -E '/var.*server/!d;s_.*=.\x27([^\x27]*)\x27.*_\1_')"
	if [ -z "${id_up}" ] || [ -z "${serv_up}" ]; then
		die "An error occured"
	fi
}

# Param "${file_name}" "${id_up}"
upload_file(){
	ret_url="$(curl -o "-" -F "upload_form=@${1}" -F "uploadId=${2}" "https://${serv_up}.${base_domain}/upload" -# | sed -E '/<textarea id="names-links" class="file_upload_remote">/,/<\/textarea>/!d;/https/!d')"
	inf "The File Has Been Uploaded"
	suc "Download Link: ${ret_url}"
	printf '%s' "${file_name}" | grep -qE 'tmp.zip$' && rm -f "${file_name}"
}

downldr_main(){
	url_req="${1}"
	if ! printf '%s' "${url_req}" | grep -q 'zippyshare'; then
		die "Unsupported Domain"
	fi
	ind_urlreq="$(curl -sLk "${url_req}")"
	# simply this sed if the regex fails, it will return nothing and solve will return nothing because theres nothing to slice
	# sed doesn't change its exit code whenever it fails, Note that "[exit-code]" argument in "q" is a gnu extension, it will not work with other sed variants
	while [ -z "${solve}" ]; do
		[ "${is_success}" = "true" ] || : "$((ind_iter += 1))"
		case "${ind_iter}" in
			1)
				ind="$(printf '%s' "${ind_urlreq}" | sed -nE 's_.*document.getElementById.*dl.*.href.*"(/d/[^\"]*)"\+\(([^\+]*)+.*"([^\"]*)"\;_\1#\2+11#\3_p')"
				;;
			2)
				ind="$(printf '%s' "${ind_urlreq}" | sed -nE 's_.*document.getElementById.*dl.*.href.*"(/d/[^\"]*)".*\(([^\)]*)\).*"([^\"]+)".*_\1#\2#\3_p')"
				;;
			*)
				die "Failed to fetch scrapings, probably the algorithm changed again"
				;;
		esac
		solve="${ind#*#}"
		if [ -n "${solve%%#*}" ] && printf '%s' "${solve%%#*}" | grep -qE '^([0-9\-\+\*%/ ]*)$'; then
			solve="$((${solve%%#*}))"
			is_success="true"	# No need to iterate through patterns if success (for multi-links)
		else
			err "Pattern #${ind_iter} failed"
			unset solve ind
		fi
	done
	col="${url_req%%/v/*}$(printf '%s' "${ind}" | sed -E "s_\#(.*?)\#_${solve}_g")"
	[ -z "${file_out}" ] && file_out="${col##*/}"
	if "${download_util}" "${col}" -o "${file_out}"; then
		suc "File \"${col##*/}\" was successfully downloaded"
	else
		err "Returned an Error while downloading \"${col##*/}\""
	fi
	unset ind ind_urlreq
}

show_help(){
	while IFS= read -r line; do
		printf "%b\n" "${line}"
	done <<-EOF
	Simple program that allows you to upload/download files via command line.
	
	 Usage: 
	     ${0##*/} [-m] [<url>|urls.txt]
	     ${0##*/} [-f <file|directory>]
	     ${0##*/} [-v|-h|--aria]
	
	 Options:
	   -f [<file|directory>]\t\t: Insert the File location to Upload
	   -m\t\t\t: Enable download listing
	   -o\t\t\t: Output file name
	   -v\t\t\t: Show the version of the script
	   -h\t\t\t: Show this help
	   --aria\t\t: Use Aria2c as Downloader
	
	Max file size upload: 500MB
	EOF
}

loop_dl_handler(){
	if [ "${m_dl}" = "true" ]; then
		[ "${1##*.}" != "txt" ] && die "List URL must be in .txt file"
		linkfound="$(grep -c 'zippyshare' "${1}")"
		[ "${linkfound}" = "0" ] && die "No zippyshare URL found, exiting..."
		inf "Total of ${linkfound} was found"
		list="$(grep 'zippyshare' "${1}")"
		OLDIFS="${IFS}"
		IFS="
		"
		for iter in ${list}; do
			: "$((a += 1))"
			inf "Downloading in Progress: [${a}/${linkfound}]"
			downldr_main "${iter}"
		done
		IFS="${OLDIFS}"
	else
		downldr_main "${1}"
	fi
}

main(){
	if [ "${is_dl}" = "true" ]; then
		loop_dl_handler "${loopdl}"
	else
		get_file_dir "${file_dir}"
		checkif "${file_dir}"
		is_dir "${file_dir}"
		get_infos
		upload_file "${file_name}" "${id_up}"
	fi
}

arg_parser(){
	while getopts ":vhmf:o:-:" opt; do
		case "${opt}" in
			v)
				printf '%s\n' "${VERSION}"
				exit 0
				;;
			h)
				show_help
				exit 0
				;;
			m)
				m_dl="true"
				;;
			f)
				case "${OPTARG}" in
					-*)
						err "File Location is Not Specified"
						show_help
						exit 1
						;;
					*)
						file_dir="${OPTARG}"
						;;
				esac
				;;
			o)
				file_out="${OPTARG}"
				;;
			-)
				case "${OPTARG}" in
					aria)
						dep_check "aria2c"
						download_util="aria2c"
						;;
					help)
						show_help
						exit 0
						;;
					*)
						err "[--${OPTARG}]: Illegal Option"
						show_help
						exit 1
						;;
				esac
				;;
			\?)
				err "[-${OPTARG}]: is not valid Argument"
				show_help
				exit 1
				;;
			:)
				err "[-${OPTARG}]: Argument must have a Value"
				show_help
				exit 1
				;;
		esac
	done
	shift "$((OPTIND -1))"
	[ "${m_dl}" = "true" ] && [ -n "${file_out}" ] && die "Output file name only applied when downloading only single file"
	[ -n "${1}" ] && loopdl="${1}" && is_dl="true"
}

dep_check "grep" "curl" "stat" "sed"
arg_parser "${@}"
main
